深入使用拼文系统
-------------

&nbsp;

本文介绍拼文制作系统的高级使用技巧，包括如何管理博客，如何绘制图表，还有常用组件的关键属性介绍，文章如何打包、传递等。

在本文之前您应先阅读本教材的《什么是拼文》、《如何撰写一份演示胶片》、《如何撰写一份博客》。

&nbsp;

### 1. 管理博客

#### 1.1 博客组与类组

PINP 博客系统按博客组、个人博客、类组共 3 级进行管理。

<div $=".body.auto1.blog_group"></div>

在自己的博客主页，不仅发布自己的文章，也能引用他人的博客，下图博客主页工具栏中，最右侧的下拉框罗列各人的博客，在博客主页缺省显示的是自己的博客，若想切换查看他人博客，从这个下拉框点选即可。比如，从 github.com/rewgt/blogs 库 fork 而来的 blogs 工程，已配置 pinp 官方提供一份 "Online help" 博客。

![groud and category](md/res/D170407-03/doc_type.png)

个人博客中的文章按组分类，如上图定义有 `"English"` 与 `"中文"` 两个分类，点击这两个按钮，将只查看指定分类的文章列表，如果点击 `"All"` 分类，表示罗列个人博客的所有文章。

#### 1.2 配置博客组

在博客主页选择 `"Config documents"` 菜单，系统将弹出如下对话框：

![config blogs](md/res/D170407-03/config_doc.gif)

其中，`"Repository name"` 一栏用来指定自己博客的名称。`"Imported repository"` 一栏定义如何引用他的博客，比如 URL 填写 `"https://pinp.github.io/blogs/"`，description 填写 `"Online help"`，然后点 Add 按钮添加，这将引入 PINP 官方提供的，用于在线帮助的博客。

#### 1.3 管理文章

上图 `"Documents"` 段列出当前博客的所有文章，支持如下配置：

1. 点击 Remove 按钮移除指定文章   
只是从博客配置表移除，并不删除磁盘文件。

2. 点击 Hide it 按钮隐藏指定文章   
本操作便于临时不让某篇文章不出现在博客主页的文章列表中，再次点击这个按钮将恢复显示。

3. 修改 Prefix 便于调整文章的置顶顺序，如果 Prefix 为空字串，表示文章不置顶

4. 修改 Category 用于改变指定文章的类组。

### 2. 胶片页编辑技巧

#### 2.1 配置单步

“单步” ，是指胶片演示中，由 “向后翻页” 动作触发一个或多个组件产生动画效果的现象。单步操作常用来表现一个组件的 渐显 或 渐消 效果，比如让一个组件从屏幕右侧逐渐移入当前页面的动画过程，这是渐显，即 pre-step，或者，组件在当前页中向左移动逐渐消失的动画过程，这是渐消，即 post-step。

可按如下步骤配置单步：

第一步，在胶片页中选中一个组件，点击 Config pre-post step 浮动按钮 ![step button](md/res/D170407-03/step.png)，弹出如下窗口：

![config step](md/res/D170407-03/config_step.gif)

上图左面竖栏用于配置渐显 pre-step，右面竖栏配置渐消 post-step，pre-step 提供 17 种入场动画，依序描述如下：

1. 从顶部渐入
2. 从右侧渐入
3. 从底部渐入
4. 从左侧渐入
5. 从右上角渐入
6. 从右下角渐入
7. 从左下角渐入
8. 从左上角渐入
9. 在原位渐显
10. 在原位旋转着渐显
11. 弹到顶层（原先可能被其它组件遮挡）
12. 压到底部（用其它组件挡住）
13. 恢复可见（选此配置时，系统先隐藏当前组件，触发时让它变可见）
14. 从 0.6 倍大小恢复到正常大小
15. 从 0.8 倍大小恢复到正常大小
16. 从 1.2 倍大小恢复到正常大小
17. 从 1.4 倍大小恢复到正常大小

post-step 也提供 17 种退场动画，与上面 17 种入场动画一一对应，入场动画是渐显，退场动画是渐消。

我们还可为渐显或渐消的动画指定快慢选项，共 5 档，如上图，其中 normal 是常规速度。另外，各单步还可设置 "join to previous step" 选项，表示本组件的入场动画，紧挨着前一单步的入场动画自动触发，前后两个入场动画之间没有间隙。

补充说明：

1. 单步执行顺序与组件的定义顺序相关，先定义的组件的单步将先动作   
这么操作可以快速调整单步顺序：选中一个定义了单步的组件，按 `cmd + x`（或 `ctrl + x`）热键剪切，然后再按 `cmd + v`（或 `ctrl + v`）粘贴，剪切会删除原组件，粘贴则在当前页中新建经复制的组件，让相关组件重新创建，从而实现单步顺序调整。

2. 仅设置 post step 的多个组件，如果它们的单步顺序是紧挨着的，它们的 post step 动作会自动合并，也就是同时生效。这个特性比较有用，比如，用于设计一次单步操作，让藏在一块挡板下的多个组件同时冒上来显示。

#### 2.2 使用 DrawPaper

DrawPaper 用于多功能绘图，支持如下绘图任务：

1. 流程图
2. 实体关系图 (即 ER 图)
3. 状态迁移图
4. Petri Net 图（即 Place/Transition 图）
5. UML 类图
6. 组织机构图
7. 思维导图

##### 2.2.1 DrawPaper 的通用绘图操作

在 shape 资源页拖入 paper 样板到主设计区，即创建 DrawPaper 组件，DrawPaper 组件类似于一张白纸，用户可以自由在上面自由摆放各种元件（为描述方便，我们称为 "图元"）。

![shape widget](md/res/D170407-03/shape_page.png)

选中 DrawPaper 组件，点击 Edit paper 浮动按钮 ![edit](md/res/D170407-03/edit_txt.png) 将进入一个 "paper编辑器" 页面，如下图：

![paper editor](md/res/D170407-03/paper_editor.png)

在 paper 上创建对象与在胶片页中创建组件类似，也通过从右侧资源区拖入不同的样板来创建图元对象。图元对象都是 SvgPanel 类型（其样板都在 shape 资源页下），配置图元对象时先用鼠标选中，然后再用环绕它的浮动按钮做相应操作。如上图，6 个环绕的浮动按钮用法如下：

<pre $=MarkedTable> ![rotate](md/res/D170407-03/rotate.png) &nbsp;&nbsp;

拖动此按钮可旋转选中的图元对象。

----

![connect](md/res/D170407-03/connect.png)

拖动此按钮可从当前对象拉出一条连接线，如按住 shift 键再拖，将拉出一条曲线。如果拖此按钮到另一对象上再松鼠标，表示让两者建立连线，同样未按下 shift 是直线连接，按下是曲线连接。

----

![clone connect](md/res/D170407-03/connect2.png)

拖动此按钮可复制当前对象，并与原对象建立连线（是直线）。如果按住 shift 键再拖，也是复制并连线，但连接线是曲线。

----

![delete](md/res/D170407-03/delete.png)

点击删除当前图元对象。

----

![clone](md/res/D170407-03/clone.png)

拖动此按钮可复制当前图元对象。

----

![edit text](md/res/D170407-03/modi_text.png)

给当前图元对象添加文本，或修改文本的 class 定义。
</pre>

选中图元对象后，用鼠标点 paper 编辑器顶部的色块，可配置它的填充颜色，如果按住 shift 键再点击色块表示配置边线颜色。如果点击色块时，右侧文本输入区如果有文本选中，表示设置选中文本的颜色。

##### 2.2.2 三个连线样板

所有 SvgPanel 图元样板中，有 3 个较为特殊，如下图：

![linker](md/res/D170407-03/linker_3.png)

前两个样板分别用于绘制折线与曲线，在拖入相应样板创建图元并选中后，用鼠标拖动这个按钮 ![connect](md/res/D170407-03/connect.png) 将延伸该折线（或曲线），每拖出一次，折线（或曲线）就增加一个控制点。

最后一个样板是 "连接器"，常为多个图元提供连接，下图选中的图元是刚创建，还没建立连接时的样子。

![linker](md/res/D170407-03/lnk_dir.png)

如果这个连接器的宽大于高，由它发出的连接将优先横向出线，见下图：

![linker](md/res/D170407-03/lnk_dir2.png)

反之，如果连接器的高大于宽，连接器将优先纵向出线，见下图：

![linker](md/res/D170407-03/lnk_dir3.png)

##### 2.2.3 编辑 markdown 文本

在 paper 编辑器中，选中一个图元，该图元的文本内容将出现在右上角的 markdown 编辑框中，如果选中的图元未启用文本节点，先点击这个浮动按钮 ![add text or modify klass](md/res/D170407-03/modi_text.png) 添加文本子节点。

如果往 paper 拖入的样板不是 SvgPanel，系统会自动在它的外面套一层 SvgPanel，里层用 markdown 格式表达拖入的样板。即：markdown 既能表文本节点，也能表达各种具有复杂界面的构件，比如下图把两个饼图放一起（往 paper 拖入两个饼图样板即可），用来比较各项指标如何变迁的。

![draw pie](md/res/D170407-03/draw_pie.png)

若想修改这种复杂界面的属性配置，选中相应图元，然后在 markdown 编辑框内作修改。由于 markdown 可以描述任意转义标签，而转义标签可以描述任意复杂界面，所以，原理上讲，摆放在 paper 中的图元能表达任意复杂界面的。只是在编辑框更改配置，需了解一些 "转义标签" 的知识。

PINP 的 markdown 编辑器（不止在 Paper 编辑器中内嵌一个，还有其它多处用到），还提供若干辅助编辑的功能，比如：

1. 从 resource 页拖入图片文件（拖文件小图标或它的预览图），扔到 markdown 编辑框里，系统将自动生成相应的 markdown 描述。

2. 往 markdown 编辑框拖入构件样板，将自动生成该构件的转义标签。

3. 在主设计区拷贝选中的构件，粘贴到 markdown 编辑框，也自动生成该构件的转义标签。

##### 2.2.4 其它绘图功能

上面并未全面介绍 paper 编辑器所有功能，多数界面操作是直接了当的，看一眼就知道怎么操作，我们略去不讲，上面专挑一些稍微复杂，或隐含特定用法的操作进行介绍。

用户可以自行探索未介绍的功能，把鼠标移到某个部件（如按钮、下拉框等）上，可获得该部件功能的简要提示。

### 3. 胶片文档的 URL 参数

PINP Blog 的博客文章固定保存在当前工程路径的 md 子目录下，在浏览器中可用如下 URL 打开文件名为 `D170406-02.txt` 的文章：

``` html
http://localhost:3000/blogs/index.html?page=D170406-02.txt
```

我们还能用特定参数控制文章如何显示，比如：

``` html
http://localhost:3000/blogs/index.html?page=D170406-02.txt&no-frame=1
```

`no-frame` 参数表示胶片页不显示边框，下表列出所有参数的功能与缺省值：

<div $=".body.auto7.param"></div>

请注意，上表参数均只对胶片类型的文档起作用。

### 4. 独立使用单篇文档

PINP blogs 是一个集成管理平台，它管理众多文档，而非单篇文档。在日常实践中，经常会有独立使用单篇文档的场景，比如，直接打开某篇文档，而非先进入集成平台，再从列表中找到相应文章。又如，撰写一篇文档后，将它打包发送给别人阅读。

#### 4.1 单篇文档的依赖项

PINP blogs 集成平台（即 blogs 项目）假定一篇文档（比如文件名为 `"xxx.txt"`）保存在当前项目所在目录的 `md` 子目录下，该文档所依赖的资源文件应存放在 `"md/res"` 下与文档文件同名的子目录中（比如 `"md/res/xxx/"`）。

除了上述两项，单篇文档还依赖若干库文件（如 JS、CSS 等），库文件统一放在 `"lib/"` 目录下。所以，如果想与他人共享您制作的拼文，需将上述三者（即 `xxx.txt`，`md/res/xxx/*`，`lib/*`）放一起打包。

#### 4.2 按本地文件的方式打开

blogs 项目路径下有一个 `index.html` 文件，这是 blogs 主页入口，如果在同目录复制这个文件，更名为某个文档名，比如存在 `"md/xxx.txt"` 文件，就更名为 `"xxx.html"`。之后，用浏览器按本地文件的方式（即 URL 以 `"file:///"` 开头）打开它，可展示这个 `"xxx.txt"` 文档。

当别人把单篇文档连同它的依赖项（如上所述三类文件）一起打包成 zip 文件发给你后，将这个 zip 文件解压缩，然后按本地文件的方式打开阅读。

#### 4.3 压缩打包

在本地 blogs 主页（即 `localhost:3000/blogs/`），点击主菜单 `"Config documents"`，系统将弹出一个包含文档列表的对话框，在每个文档项右侧有一个 `"Create zip"` 按钮，点击它即为当前文档自动创建 zip 文件，输出 zip 文件保存在 blogs 项目路径下。

说明：被打包的文档对资源引用（如图片）须自包含，如果按上述要求在 `md/res/xxx/` 下保存被引用的文件，打包是安全的。此外，文章中还需避免以绝对路径引用资源，宜改用相对路径方式。

### 5. 深度使用拼文

拼文基于 Shadow Widget 编程体系，它继承了 Shadow Widget 可视化、易开发、易扩展的特性。如果只是文章写作，拼文工具等效于 WORD、PPT，如果用于编程，拼文系统也提供一个易于拼接的 GUI 设计平台，它本质是在 React、shadow-widget、shadow-slide 基础上叠加定制化的构件库，这些构件库既用于写作，也适用于编程。

拼文技术体系依赖以下项目，均在 github 开源，需深入了解的请到项目主页了解技术细节。

1. React，项目主页：[facebook/react](https://github.com/facebook/react)   
由 Facebook 公司提供的基于虚拟 DOM 的前端开发库

2. Shadow Widget，项目主页：[rewgt/shadow-widget](https://github.com/rewgt/shadow-widget)   
由 PINP.COM 提供的前端可视化开发系统

3. Shadow Server，项目主页：[rewgt/shadow-server](https://github.com/rewgt/shadow-server)   
由 PINP.COM 提供的用于在本机启动一个 Web Service 服务程序

4. Shadow Slide，项目主页：[rewgt/shadow-slide](https://github.com/rewgt/shadow-slide)   
由 PINP.COM 提供的胶片页构件库

5. PINP Blogs，项目主页：[rewgt/blogs](https://github.com/rewgt/blogs)   
由 PINP.COM 提供的博客管理系统

如果您想深入研究 PINP Blogs 如何服务于 Web 前端界面开发的，请依次研究上述开源项，每个项目均有较完整的帮助文档。另外，如果您并不想用 PINP 编程，只是想自行定制一些构件样板，以便以后写文章时，拖入样板快速生成一些漂亮的、富于表现力的界面元件，也可以深入研究上述项目。

&nbsp;
<!-- SLIDE PAGES V1.0, DO NOT CHANGE THIS LINE. -->
<div $=ScenePage key='auto0'></div>
<div $=ScenePage key='auto7' no-show='1'>
  <pre $=MarkedTable key='param' data-group.optid='pinp/blogs/step0' width='{781}' klass='S5 small-default-large default-align_center-right p1-p2-p3-p0 no_shadow-lb-rb-rt-lt rewgt-tbl tbl_01' border-width='{1}' sty__='{{"borderColor":"#808080"}}' left='{-328}' top='{-170}'>参数

功能与默认值

---

size

指定胶片页的宽与高，用字母 'x' 分隔宽度与高度的像素值，如 '300x200'，缺省值为 900x700。如果指定 0x0 表示自动取当前屏幕的宽度与高度。

---

page


指定胶片文档打开时，自动跳到哪一页显示。可以取 0, 1, 2 等序号数值，也可以用字串指定 key 名，跳到定义该 key 的胶片页。缺省值为数值 0，即胶片首页。

---

page-gap

指定胶片页之间有多像素间隔，缺省值为 0，表示由系统自动取值。

---

background-color

用类似 'rgb(216,216,216)' 或 'rgba(0,0,0,0.5)' 的格式指定文档的背景颜色。缺省取值为'rgb(216,216,216)'。

---

no-sidebar

指示是否 “不显示左右边栏”，左右边栏用于点击时向前或向后翻页，取值 1 或 0，缺省值是 0（意为显示左右边栏）。

---

no-keypress

指示是否 “不使用热键翻页”，取值 1 或 0，缺省值是 0（意为使用热键）。热键包括用方向键或回车键翻页，用 cmd+up (或 ctrl+home) 翻至首页，用 cmd+down (或 ctrl+end) 翻至末页等。

---

no-frame

指示是否 “不显示胶片页边框”，取值 1 或 0，缺省值是 0（意为显示页边框）。

---

no-trans

指示是否 “不使用翻页动效”（向左或向右滑动的过渡效果），取值 1 或 0，缺省值是 0（意为使用翻页动效）。

---

no-ground

指示胶片页是否 “无背景”（即透明），取值 1 或 0，缺省值是 0（意为使用白色背景）。缺省时，胶片页是白色不透明的，如果想让胶片页变透明，可改此配置。

---

autoplay

是否自动播放，用数值表达每次翻页的延时时长（以秒为单位），缺省值为 0，表示不自动翻页，如果取值大于 0，表示启用自动翻页。

---

loopback

与 autoplay 配合使用，表示在自动播放的情况下，播放到末尾时是否自动环回。取值 1 或 0，缺省值是 0（意为不环回）。
</pre>
</div>
<div $=ScenePage key='auto1' no-show='1'>
  <div $=".pinp.doc_info.thumb" sty__='{{"background":"url(md/res/D170407-03/pinp_tutorial.jpg) no-repeat center","backgroundSize":"100% 100%"}}' no-show='' left='{-459}' top='{-70}' klass='default-large-small p1-p2-p3-p0 visible-auto-hidden default-align_center-right' data-group.optid='pinp/blogs/step4' width='{280}' height='{200}'></div>
  <div $=rewgt.DrawPaper key='blog_group' sty__='{{"zIndex":"-999"}}' data-group.optid='pinp/blogs/step0' klass='default-large-small S5' width='{460}' height='{272}' offset-x='{-45}' offset-y='{-46}' left='{-120}' top='{-147}' def-id='_1492044921'>
    <div $=rewgt.SvgPanel key='auto2' klass='nowrap-default-wrap_reverse items_center-end-stretch-default' left='{57}' top='{60}' svg.cfg='{[0,[null,[["auto5",-1,"auto3"]]],"lib/res/rect.svg.json"]}'>
      <pre $=MarkedDiv key='txt' width='{0.9999}' klass='default-large-small p1-p2-p3-p0 align_center-right-default'>博客组</pre>
    </div>
    <div $=rewgt.SvgPanel key='auto3' klass='nowrap-default-wrap_reverse items_center-end-stretch-default' left='{91}' top='{171}' width='{36}' height='{60}' stroke='{1}' data-zero='1' svg.cfg='{[0,[null,[["auto8",-1,"auto6"],["auto14",-1,"auto12"],["auto17",-1,"auto15"]]],"lib/res/point_node.svg.json"]}'></div>
    <div $=rewgt.SvgPanel key='auto6' klass='nowrap-default-wrap_reverse items_center-end-stretch-default' left='{152}' top='{130}' width='{116}' svg.cfg='{[0,[null,[["auto21",-1,"auto19"]]],"lib/res/rect.svg.json"]}'>
      <pre $=MarkedDiv key='txt' width='{0.9999}' klass='default-large-small p1-p2-p3-p0 align_center-right-default'>我的博客</pre>
    </div>
    <div $=rewgt.SvgPanel key='auto5' klass='nowrap-default-wrap_reverse items_center-end-stretch-default' left='{77}' top='{68}' width='{65}' height='{158}' svg.cfg='{[-1,["",0,0,1,0,0,0,51,0,102],"lib/res/arrows.svg.json"]}' data-from='auto2'></div>
    <div $=rewgt.SvgPanel key='auto8' klass='nowrap-default-wrap_reverse items_center-end-stretch-default' left='{77}' top='{118}' width='{99}' height='{115}' svg.cfg='{[-1,["",0,0,1,0,51,0,0,43,0],"lib/res/arrows.svg.json"]}' data-from='auto3'></div>
    <div $=rewgt.SvgPanel key='auto12' klass='nowrap-default-wrap_reverse items_center-end-stretch-default' left='{152}' top='{180}' width='{116}' svg.cfg='{[0,[null,0],"lib/res/rect.svg.json"]}'>
      <pre $=MarkedDiv key='txt' width='{0.9999}' klass='default-large-small p1-p2-p3-p0 align_center-right-default'>他人的博客</pre>
    </div>
    <div $=rewgt.SvgPanel key='auto14' klass='nowrap-default-wrap_reverse items_center-end-stretch-default' left='{77}' top='{169}' width='{99}' height='{65}' svg.cfg='{[-1,["",0,0,1,0,0,22,0,43,0],"lib/res/arrows.svg.json"]}' data-from='auto3'></div>
    <div $=rewgt.SvgPanel key='auto15' klass='nowrap-default-wrap_reverse items_center-end-stretch-default' left='{152}' top='{232}' width='{116}' svg.cfg='{[0,[null,[["auto33",-1,"auto30"]]],"lib/res/rect.svg.json"]}'>
      <pre $=MarkedDiv key='txt' width='{0.9999}' klass='default-large-small p1-p2-p3-p0 align_center-right-default'>他人的博客</pre>
    </div>
    <div $=rewgt.SvgPanel key='auto17' klass='nowrap-default-wrap_reverse items_center-end-stretch-default' left='{77}' top='{169}' width='{99}' height='{115}' svg.cfg='{[-1,["",0,0,1,0,0,0,51,43,51],"lib/res/arrows.svg.json"]}' data-from='auto3'></div>
    <div $=rewgt.SvgPanel key='auto18' sty__='{{"fillColor":"rgba(0,0,0,0)","strokeColor":"rgba(0,0,0,0)"}}' klass='nowrap-default-wrap_reverse items_center-end-stretch-default' left='{156}' top='{262}' svg.cfg='{[0,[],"lib/res/rect2.svg.json"]}'>
      <pre $=MarkedDiv key='txt' width='{0.9999}' klass='default-large-small p1-p2-p3-p0 align_center-right-default'>...</pre>
    </div>
    <div $=rewgt.SvgPanel key='auto19' klass='nowrap-default-wrap_reverse items_center-end-stretch-default' left='{292}' top='{121}' width='{44}' height='{60}' stroke='{1}' data-zero='1' svg.cfg='{[0,[null,[["auto26",-1,"auto22"],["auto28",-1,"auto23"]]],"lib/res/point_node.svg.json"]}'></div>
    <div $=rewgt.SvgPanel key='auto21' klass='nowrap-default-wrap_reverse items_center-end-stretch-default' left='{236}' top='{119}' width='{102}' height='{65}' svg.cfg='{[-1,["",0,0,1,0,0,23,0,46,0],"lib/res/arrows.svg.json"]}' data-from='auto6'></div>
    <div $=rewgt.SvgPanel key='auto22' klass='nowrap-default-wrap_reverse items_center-end-stretch-default' left='{359}' top='{91}' svg.cfg='{[0,[],"lib/res/rect.svg.json"]}'>
      <pre $=MarkedDiv key='txt' width='{0.9999}' klass='default-large-small p1-p2-p3-p0 align_center-right-default'>类组1</pre>
    </div>
    <div $=rewgt.SvgPanel key='auto23' klass='nowrap-default-wrap_reverse items_center-end-stretch-default' left='{359}' top='{158}' svg.cfg='{[0,[],"lib/res/rect.svg.json"]}'>
      <pre $=MarkedDiv key='txt' width='{0.9999}' klass='default-large-small p1-p2-p3-p0 align_center-right-default'>类组N</pre>
    </div>
    <div $=rewgt.SvgPanel key='auto24' sty__='{{"fillColor":"rgba(0,0,0,0)","strokeColor":"rgba(0,0,0,0)"}}' klass='nowrap-default-wrap_reverse items_center-end-stretch-default' left='{353}' top='{120}' svg.cfg='{[0,[],"lib/res/rect2.svg.json"]}'>
      <pre $=MarkedDiv key='txt' width='{0.9999}' klass='default-large-small p1-p2-p3-p0 align_center-right-default'>...</pre>
    </div>
    <div $=rewgt.SvgPanel key='auto28' klass='nowrap-default-wrap_reverse items_center-end-stretch-default' left='{282}' top='{119}' width='{102}' height='{91}' svg.cfg='{[-1,["",0,0,1,0,0,0,27,46,27],"lib/res/arrows.svg.json"]}' data-from='auto19'></div>
    <div $=rewgt.SvgPanel key='auto30' klass='nowrap-default-wrap_reverse items_center-end-stretch-default' left='{358}' top='{226}' svg.cfg='{[0,[],"lib/res/rect.svg.json"]}'>
      <pre $=MarkedDiv key='txt' width='{0.9999}' klass='default-large-small p1-p2-p3-p0 align_center-right-default'>类组1</pre>
    </div>
    <div $=rewgt.SvgPanel key='auto31' sty__='{{"fillColor":"rgba(0,0,0,0)","strokeColor":"rgba(0,0,0,0)"}}' klass='nowrap-default-wrap_reverse items_center-end-stretch-default' left='{353}' top='{255}' svg.cfg='{[0,[],"lib/res/rect2.svg.json"]}'>
      <pre $=MarkedDiv key='txt' width='{0.9999}' klass='default-large-small p1-p2-p3-p0 align_center-right-default'>...</pre>
    </div>
    <div $=rewgt.SvgPanel key='auto26' klass='nowrap-default-wrap_reverse items_center-end-stretch-default' left='{282}' top='{81}' width='{101}' height='{102}' svg.cfg='{[-1,["",0,0,1,0,38,0,0,45,0],"lib/res/arrows.svg.json"]}' data-from='auto19'></div>
    <div $=rewgt.SvgPanel key='auto33' klass='nowrap-default-wrap_reverse items_center-end-stretch-default' left='{236}' top='{215}' width='{148}' height='{65}' svg.cfg='{[-1,["",0,0,1,0,0,46,0,92,0],"lib/res/arrows.svg.json"]}' data-from='auto15'></div>
  </div>
</div>
